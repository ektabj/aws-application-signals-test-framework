"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StagingStorageStack = void 0;
const pipelines_1 = require("@amzn/pipelines");
const s3_1 = require("../constructs/s3");
const ecr_1 = require("../constructs/ecr");
const constants_1 = require("../utils/constants");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
/* Stack used to store the ECR repository and S3 bucket used in pulse */
class StagingStorageStack extends pipelines_1.DeploymentStack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const writeRoles = [aws_iam_1.Role.fromRoleName(this, 'workflow-role', constants_1.WORKFLOW_ROLE)];
        new s3_1.S3Bucket(this, 'PythonBucketStaging', {
            bucketName: constants_1.S3_ADOT_PYTHON_STAGING,
            readAccounts: ['654654176582'],
            readWriteRoles: writeRoles,
        });
        new s3_1.S3Bucket(this, 'PythonBucketNightly', {
            bucketName: constants_1.S3_ADOT_PYTHON_NIGHTLY,
            readAccounts: ['654654176582'],
            readWriteRoles: writeRoles,
        });
        new s3_1.S3Bucket(this, 'DotnetBucketStaging', {
            bucketName: constants_1.S3_ADOT_DOTNET_STAGING,
            readAccounts: ['654654176582'],
            readWriteRoles: writeRoles,
        });
        new ecr_1.ECRRepo(this, 'PythonECRStaging', {
            name: constants_1.ECR_ADOT_PYTHON_STAGING,
            pullAccounts: ['654654176582'],
            pushPullRoles: writeRoles,
        });
        new ecr_1.ECRRepo(this, 'PythonECRNightly', {
            name: constants_1.ECR_ADOT_PYTHON_NIGHTLY,
            pullAccounts: ['654654176582'],
            pushPullRoles: writeRoles,
        });
        new ecr_1.ECRRepo(this, 'DotnetECRStaging', {
            name: constants_1.ECR_ADOT_DOTNET_STAGING,
            pullAccounts: ['654654176582'],
            pushPullRoles: writeRoles,
        });
    }
}
exports.StagingStorageStack = StagingStorageStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhZ2luZ19zdG9yYWdlX3N0YWNrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL3N0YWNrcy9zdGFnaW5nX3N0b3JhZ2Vfc3RhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsK0NBQXdFO0FBR3hFLHlDQUE0QztBQUM1QywyQ0FBNEM7QUFDNUMsa0RBUTRCO0FBQzVCLGlEQUEyQztBQU8zQyx3RUFBd0U7QUFDeEUsTUFBYSxtQkFBb0IsU0FBUSwyQkFBZTtJQUNwRCxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQXdCO1FBQzlELEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sVUFBVSxHQUFHLENBQUMsY0FBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsZUFBZSxFQUFFLHlCQUFhLENBQUMsQ0FBQyxDQUFDO1FBRTdFLElBQUksYUFBUSxDQUFDLElBQUksRUFBRSxxQkFBcUIsRUFBRTtZQUN0QyxVQUFVLEVBQUUsa0NBQXNCO1lBQ2xDLFlBQVksRUFBRSxDQUFDLGNBQWMsQ0FBQztZQUM5QixjQUFjLEVBQUUsVUFBVTtTQUM3QixDQUFDLENBQUM7UUFFSCxJQUFJLGFBQVEsQ0FBQyxJQUFJLEVBQUUscUJBQXFCLEVBQUU7WUFDdEMsVUFBVSxFQUFFLGtDQUFzQjtZQUNsQyxZQUFZLEVBQUUsQ0FBQyxjQUFjLENBQUM7WUFDOUIsY0FBYyxFQUFFLFVBQVU7U0FDN0IsQ0FBQyxDQUFDO1FBRUgsSUFBSSxhQUFRLENBQUMsSUFBSSxFQUFFLHFCQUFxQixFQUFFO1lBQ3RDLFVBQVUsRUFBRSxrQ0FBc0I7WUFDbEMsWUFBWSxFQUFFLENBQUMsY0FBYyxDQUFDO1lBQzlCLGNBQWMsRUFBRSxVQUFVO1NBQzdCLENBQUMsQ0FBQztRQUVILElBQUksYUFBTyxDQUFDLElBQUksRUFBRSxrQkFBa0IsRUFBRTtZQUNsQyxJQUFJLEVBQUUsbUNBQXVCO1lBQzdCLFlBQVksRUFBRSxDQUFDLGNBQWMsQ0FBQztZQUM5QixhQUFhLEVBQUUsVUFBVTtTQUM1QixDQUFDLENBQUM7UUFFSCxJQUFJLGFBQU8sQ0FBQyxJQUFJLEVBQUUsa0JBQWtCLEVBQUU7WUFDbEMsSUFBSSxFQUFFLG1DQUF1QjtZQUM3QixZQUFZLEVBQUUsQ0FBQyxjQUFjLENBQUM7WUFDOUIsYUFBYSxFQUFFLFVBQVU7U0FDNUIsQ0FBQyxDQUFDO1FBRUgsSUFBSSxhQUFPLENBQUMsSUFBSSxFQUFFLGtCQUFrQixFQUFFO1lBQ2xDLElBQUksRUFBRSxtQ0FBdUI7WUFDN0IsWUFBWSxFQUFFLENBQUMsY0FBYyxDQUFDO1lBQzlCLGFBQWEsRUFBRSxVQUFVO1NBQzVCLENBQUMsQ0FBQztJQUNQLENBQUM7Q0FDSjtBQXpDRCxrREF5Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEZXBsb3ltZW50U3RhY2ssIERlcGxveW1lbnRTdGFja1Byb3BzIH0gZnJvbSAnQGFtem4vcGlwZWxpbmVzJztcblxuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XG5pbXBvcnQgeyBTM0J1Y2tldCB9IGZyb20gJy4uL2NvbnN0cnVjdHMvczMnO1xuaW1wb3J0IHsgRUNSUmVwbyB9IGZyb20gJy4uL2NvbnN0cnVjdHMvZWNyJztcbmltcG9ydCB7XG4gICAgRUNSX0FET1RfRE9UTkVUX1NUQUdJTkcsXG4gICAgRUNSX0FET1RfUFlUSE9OX05JR0hUTFksXG4gICAgRUNSX0FET1RfUFlUSE9OX1NUQUdJTkcsXG4gICAgUzNfQURPVF9ET1RORVRfU1RBR0lORyxcbiAgICBTM19BRE9UX1BZVEhPTl9OSUdIVExZLFxuICAgIFMzX0FET1RfUFlUSE9OX1NUQUdJTkcsXG4gICAgV09SS0ZMT1dfUk9MRSxcbn0gZnJvbSAnLi4vdXRpbHMvY29uc3RhbnRzJztcbmltcG9ydCB7IFJvbGUgfSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtaWFtJztcblxuaW50ZXJmYWNlIFN0b3JhZ2VTdGFja1Byb3BzIGV4dGVuZHMgRGVwbG95bWVudFN0YWNrUHJvcHMge1xuICAgIHN0YWdpbmdBY2NvdW50czogc3RyaW5nW107XG4gICAgYmV0YUFjY291bnRzOiBzdHJpbmdbXTtcbn1cblxuLyogU3RhY2sgdXNlZCB0byBzdG9yZSB0aGUgRUNSIHJlcG9zaXRvcnkgYW5kIFMzIGJ1Y2tldCB1c2VkIGluIHB1bHNlICovXG5leHBvcnQgY2xhc3MgU3RhZ2luZ1N0b3JhZ2VTdGFjayBleHRlbmRzIERlcGxveW1lbnRTdGFjayB7XG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IFN0b3JhZ2VTdGFja1Byb3BzKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCwgcHJvcHMpO1xuICAgICAgICBjb25zdCB3cml0ZVJvbGVzID0gW1JvbGUuZnJvbVJvbGVOYW1lKHRoaXMsICd3b3JrZmxvdy1yb2xlJywgV09SS0ZMT1dfUk9MRSldO1xuXG4gICAgICAgIG5ldyBTM0J1Y2tldCh0aGlzLCAnUHl0aG9uQnVja2V0U3RhZ2luZycsIHtcbiAgICAgICAgICAgIGJ1Y2tldE5hbWU6IFMzX0FET1RfUFlUSE9OX1NUQUdJTkcsXG4gICAgICAgICAgICByZWFkQWNjb3VudHM6IFsnNjU0NjU0MTc2NTgyJ10sXG4gICAgICAgICAgICByZWFkV3JpdGVSb2xlczogd3JpdGVSb2xlcyxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbmV3IFMzQnVja2V0KHRoaXMsICdQeXRob25CdWNrZXROaWdodGx5Jywge1xuICAgICAgICAgICAgYnVja2V0TmFtZTogUzNfQURPVF9QWVRIT05fTklHSFRMWSxcbiAgICAgICAgICAgIHJlYWRBY2NvdW50czogWyc2NTQ2NTQxNzY1ODInXSxcbiAgICAgICAgICAgIHJlYWRXcml0ZVJvbGVzOiB3cml0ZVJvbGVzLFxuICAgICAgICB9KTtcblxuICAgICAgICBuZXcgUzNCdWNrZXQodGhpcywgJ0RvdG5ldEJ1Y2tldFN0YWdpbmcnLCB7XG4gICAgICAgICAgICBidWNrZXROYW1lOiBTM19BRE9UX0RPVE5FVF9TVEFHSU5HLFxuICAgICAgICAgICAgcmVhZEFjY291bnRzOiBbJzY1NDY1NDE3NjU4MiddLFxuICAgICAgICAgICAgcmVhZFdyaXRlUm9sZXM6IHdyaXRlUm9sZXMsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIG5ldyBFQ1JSZXBvKHRoaXMsICdQeXRob25FQ1JTdGFnaW5nJywge1xuICAgICAgICAgICAgbmFtZTogRUNSX0FET1RfUFlUSE9OX1NUQUdJTkcsXG4gICAgICAgICAgICBwdWxsQWNjb3VudHM6IFsnNjU0NjU0MTc2NTgyJ10sXG4gICAgICAgICAgICBwdXNoUHVsbFJvbGVzOiB3cml0ZVJvbGVzLFxuICAgICAgICB9KTtcblxuICAgICAgICBuZXcgRUNSUmVwbyh0aGlzLCAnUHl0aG9uRUNSTmlnaHRseScsIHtcbiAgICAgICAgICAgIG5hbWU6IEVDUl9BRE9UX1BZVEhPTl9OSUdIVExZLFxuICAgICAgICAgICAgcHVsbEFjY291bnRzOiBbJzY1NDY1NDE3NjU4MiddLFxuICAgICAgICAgICAgcHVzaFB1bGxSb2xlczogd3JpdGVSb2xlcyxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbmV3IEVDUlJlcG8odGhpcywgJ0RvdG5ldEVDUlN0YWdpbmcnLCB7XG4gICAgICAgICAgICBuYW1lOiBFQ1JfQURPVF9ET1RORVRfU1RBR0lORyxcbiAgICAgICAgICAgIHB1bGxBY2NvdW50czogWyc2NTQ2NTQxNzY1ODInXSxcbiAgICAgICAgICAgIHB1c2hQdWxsUm9sZXM6IHdyaXRlUm9sZXMsXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiJdfQ==