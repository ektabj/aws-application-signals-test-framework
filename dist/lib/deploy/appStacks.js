"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addAppStacks = void 0;
const e2eTestCommonStack_1 = require("../stacks/e2eTestCommonStack");
const ec2JavaTestStack_1 = require("../stacks/ec2JavaTestStack");
const eksJavaTestStack_1 = require("../stacks/eksJavaTestStack");
const eksMetricLimiterJavaTestStack_1 = require("../stacks/eksMetricLimiterJavaTestStack");
const eksPythonTestStack_1 = require("../stacks/eksPythonTestStack");
const eksDotnetTestStack_1 = require("../stacks/eksDotnetTestStack");
const adotE2EReleaseTestingStack_1 = require("../stacks/release-testing/adotE2EReleaseTestingStack");
const adotPythonE2EReleaseTestingStack_1 = require("../stacks/release-testing/adotPythonE2EReleaseTestingStack");
const cwAgentE2EReleaseTestingStack_1 = require("../stacks/release-testing/cwAgentE2EReleaseTestingStack");
const cwAgentOperatorE2EReleaseTestingStack_1 = require("../stacks/release-testing/cwAgentOperatorE2EReleaseTestingStack");
const enablementScriptE2EReleaseTestingStack_1 = require("../stacks/release-testing/enablementScriptE2EReleaseTestingStack");
const cwAgentOperatorPythonE2EReleaseTestingStack_1 = require("../stacks/release-testing/cwAgentOperatorPythonE2EReleaseTestingStack");
const eksPlaygroundStack_1 = require("../stacks/eksPlaygroundStack");
const githubRunnerImagesStack_1 = require("../stacks/githubRunnerImagesStack");
// List of stacks that will be added to each account
const addAppStacks = (app, { env, stage }) => {
    const stackProp = {
        env: env,
        stage: stage,
    };
    const eks_java_test_stack = new eksJavaTestStack_1.EksJavaTestStack(app, `app-signals-java-e2e-eks-${stage}-${env.region}`, stackProp);
    const eks_metric_limiter_java_test_stack = new eksMetricLimiterJavaTestStack_1.EksMetricLimiterJavaTestStack(app, `app-signals-java-e2e-eks-metric-limite-${stage}-${env.region}`, stackProp);
    const ec2_java_test_stack = new ec2JavaTestStack_1.Ec2JavaTestStack(app, `app-signals-java-e2e-ec2-${stage}-${env.region}`, stackProp);
    const eks_python_test_stack = new eksPythonTestStack_1.EksPythonTestStack(app, `app-signals-python-e2e-eks-${stage}-${env.region}`, stackProp);
    const eks_dotnet_test_stack = new eksDotnetTestStack_1.EksDotnetTestStack(app, `app-signals-dotnet-e2e-eks-${stage}-${env.region}`, stackProp);
    const e2e_test_common_stack = new e2eTestCommonStack_1.E2ETestCommonStack(app, `github-provider-role-${stage}-${env.region}`, stackProp);
    // The release testing stacks will be added to the us-east-1 account. There is a limit on how many EKS clusters
    // may be added to each account, and will need to request a service quote increase if more are needed.
    let adot_e2e_release_testing_stack;
    let adot_python_e2e_release_testing_stack;
    let cw_agent_e2e_release_testing_stack;
    let cw_agent_operator_e2e_release_testing_stack;
    let cw_agent_operator_python_e2e_release_testing_stack;
    let enablement_script_e2e_release_testing_stack;
    let github_runner_images_stack;
    let eks_playground_stack;
    if (env.region === 'us-east-1') {
        adot_e2e_release_testing_stack = new adotE2EReleaseTestingStack_1.AdotE2EReleaseTestingStack(app, `adot-e2e-release-testing-${stage}-${env.region}`, stackProp);
        adot_python_e2e_release_testing_stack = new adotPythonE2EReleaseTestingStack_1.AdotPythonE2EReleaseTestingStack(app, `adot-python-e2e-release-testing-${stage}-${env.region}`, stackProp);
        cw_agent_e2e_release_testing_stack = new cwAgentE2EReleaseTestingStack_1.CWAgentE2EReleaseTestingStack(app, `cw-agent-e2e-release-testing-${stage}-${env.region}`, stackProp);
        cw_agent_operator_e2e_release_testing_stack = new cwAgentOperatorE2EReleaseTestingStack_1.CWAgentOperatorE2EReleaseTestingStack(app, `cw-agent-operator-e2e-release-testing-${stage}-${env.region}`, stackProp);
        cw_agent_operator_python_e2e_release_testing_stack = new cwAgentOperatorPythonE2EReleaseTestingStack_1.CWAgentOperatorPythonE2EReleaseTestingStack(app, `cw-agent-operator-python-e2e-release-testing-${stage}-${env.region}`, stackProp);
        enablement_script_e2e_release_testing_stack = new enablementScriptE2EReleaseTestingStack_1.EnablementScriptE2EReleaseTestingStack(app, `enablement-script-e2e-release-testing-${stage}-${env.region}`, stackProp);
        github_runner_images_stack = new githubRunnerImagesStack_1.GithubRunnerImagesStack(app, `github-runner-images-${stage}-${env.region}`, stackProp);
        eks_playground_stack = new eksPlaygroundStack_1.EksPlaygroundStack(app, `eks-playground-${stage}-${env.region}`, stackProp);
    }
    return {
        eks_java_test_stack,
        eks_metric_limiter_java_test_stack,
        ec2_java_test_stack,
        eks_python_test_stack,
        eks_dotnet_test_stack,
        e2e_test_common_stack,
        adot_e2e_release_testing_stack,
        adot_python_e2e_release_testing_stack,
        cw_agent_e2e_release_testing_stack,
        cw_agent_operator_e2e_release_testing_stack,
        cw_agent_operator_python_e2e_release_testing_stack,
        enablement_script_e2e_release_testing_stack,
        github_runner_images_stack,
        eks_playground_stack,
    };
};
exports.addAppStacks = addAppStacks;
//# sourceMappingURL=data:application/json;base64,